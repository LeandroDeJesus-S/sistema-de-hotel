# Generated by Django 3.2.25 on 2024-07-25 16:16

import clientes.validators
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'invalid': 'Informe um nome de usuário válido. O valor deve conter apenas letras, números e os seguintes caracteres @.+-_', 'unique': 'Username já existe.'}, max_length=150, unique=True, validators=[django.core.validators.MinLengthValidator(2, 'Nome de usuário deve ter de 2 a 150 caracteres.'), django.core.validators.MaxLengthValidator(150, 'Nome de usuário deve ter de 2 a 150 caracteres.'), django.contrib.auth.validators.UnicodeUsernameValidator()])),
                ('nome', models.CharField(max_length=25, validators=[django.core.validators.RegexValidator('[A-Za-z]{2,25}', 'O nome deve conter apenas letras'), django.core.validators.MaxLengthValidator(25, 'Nome muito grande.'), django.core.validators.MinLengthValidator(2, 'Nome muito pequeno.')], verbose_name='Nome')),
                ('sobrenome', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('[A-Za-z]{2,50}', 'O sobrenome deve conter apenas letras'), django.core.validators.MinLengthValidator(2, 'Sobrenome muito pequeno.'), django.core.validators.MaxLengthValidator(50, 'Sobrenome muito grande.')], verbose_name='Sobrenome')),
                ('nascimento', models.DateField(blank=True, null=True, verbose_name='Data de nascimento')),
                ('email', models.EmailField(error_messages={'blank': 'Por favor, preencha o campo de email.', 'null': 'Por favor, preencha o campo de email.'}, max_length=255, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='E-mail')),
                ('telefone', models.CharField(max_length=11, validators=[clientes.validators.validate_phone_number], verbose_name='Telefone')),
                ('cpf', models.CharField(max_length=11, unique=True, validators=[clientes.validators.CpfValidator()], verbose_name='CPF')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
